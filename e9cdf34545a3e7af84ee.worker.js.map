{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/workers/lufs.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","realTimeBuffer","FFT_SIZE","step","gatingBlockIntervalSamples","numberOfGatingBlocks","analysisIntervalCounter","absoluteThreshold","init","e","FS","data","overlap","analysisInterval","gatingBlockInterval","analysisIntervalSamples","Math","round","floor","realTimeBufferLength","ceil","Float32Array","longTermLoudness","counter","filledrealTimeBuffer","fillBuffer","filledrealTimeBufferClone","allGatingBlocks","sliceBuffer","blocksAboveAbsoluteThreshold","filterOutBelowThreshold","sumAboveAbsoluteThreshold","meanSquareLoudness","relativeThreshold","blocksAboveBothThreshold","integratedLoudness","postMessage","returnMessageType","shortTermLoudness","filteredSignal","blockCounter","sample","length","block","gatingBlockStepSize","currentGatingBlock","Array","slice","blocksArray","threshold","filter","signal","averageOverBlocks","blocksSum","numberOfBlocks","keys","j","sum","log10","onmessage","messageType"],"mappings":"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","file":"e9cdf34545a3e7af84ee.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"https://lufs.froghyar.com/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"268d\");\n","/**\n * LUFS Calculation according to ITU-R BS.1770-4\n */\n\n//  Init global variables\nlet realTimeBuffer\nlet FFT_SIZE\nlet step\nlet gatingBlockIntervalSamples\nlet numberOfGatingBlocks\nlet analysisIntervalCounter\nlet absoluteThreshold\n\nonmessage = e => {\n  if (e.data.messageType === 'init') {\n    // Init method called once only on the first counter\n    init(e)\n  }\n  if (e.data.messageType === 'fillBuffer') {\n    // These methods are repeatedly called, real-time calculation\n    longTermLoudness(e)\n    shortTermLoudness(e)\n  }\n}\n\n/**\n * Initialises the parameters needed for the short term and\n * integrated calculations\n * @param {Object} e event data posted to the worker\n */\nfunction init (e) {\n  // Init local variables\n  const FS = e.data.FS\n  const overlap = 0.75 // [%]\n  const analysisInterval = 1000 // [Ms], analysis interval set to one seconds accordig to literature\n  const gatingBlockInterval = 400 // [Ms]\n  const analysisIntervalSamples = Math.round((FS * analysisInterval) / 1000)\n\n  // Init global variables\n  step = 1 - overlap\n  FFT_SIZE = e.data.FFT_SIZE\n  gatingBlockIntervalSamples = Math.round((FS * gatingBlockInterval) / 1000)\n  numberOfGatingBlocks = Math.floor((analysisIntervalSamples - gatingBlockIntervalSamples) / (gatingBlockIntervalSamples * step)) + 1\n  absoluteThreshold = -70 // LUFS\n\n  // Create real time buffer array - collecting one second of samples\n  const realTimeBufferLength = Math.ceil(FS / gatingBlockIntervalSamples) * gatingBlockIntervalSamples\n\n  // Init real-time buffer\n  realTimeBuffer = new Float32Array(realTimeBufferLength)\n  analysisIntervalCounter = Math.floor(realTimeBufferLength / FFT_SIZE) // analysis interval in counter value\n}\n\nfunction longTermLoudness (e) {\n  // Init local variables\n  const counter = e.data.counter\n  // Fill up buffer first then return calculation\n  const filledrealTimeBuffer = fillBuffer(e)\n  if (!(counter % analysisIntervalCounter === 0)) {\n    return\n  }\n\n  // Clone the filled ring buffer for processing\n  const filledrealTimeBufferClone = filledrealTimeBuffer\n\n  // Fetch all 400 Ms gating blocks\n  const allGatingBlocks = sliceBuffer(filledrealTimeBufferClone, numberOfGatingBlocks, gatingBlockIntervalSamples)\n\n  // Filter out blocks below absolute threshold\n  const blocksAboveAbsoluteThreshold = filterOutBelowThreshold(allGatingBlocks, absoluteThreshold)\n\n  // Create relative threshold - need to average over all blocks\n  const sumAboveAbsoluteThreshold = meanSquareLoudness(blocksAboveAbsoluteThreshold, true)\n  const relativeThreshold = sumAboveAbsoluteThreshold - 10 // [LUFS]\n\n  // Filter out blocks below relative threshold\n  const blocksAboveBothThreshold = filterOutBelowThreshold(blocksAboveAbsoluteThreshold, relativeThreshold)\n\n  // Get loudness of blocks\n  const integratedLoudness = meanSquareLoudness(blocksAboveBothThreshold, true)\n  // Send back loudness to main thread\n  postMessage({\n    returnMessageType: 'integratedCalculated',\n    integratedLoudness\n  })\n}\n\n/**\n * Calculates the short term loudness of the signal in LUFS\n * @param {Object} e event data posted to the worker\n */\nfunction shortTermLoudness (e) {\n  const filteredSignal = e.data.filteredSignal\n  const shortTermLoudness = meanSquareLoudness(filteredSignal)\n  postMessage({\n    returnMessageType: 'shortTermCalculated',\n    shortTermLoudness\n  })\n}\n\n/*\n  Utility functions\n*/\n\n/**\n * Fills up the ringBuffer Array needed for the long term integrated\n * loudness calculation\n * @param {Object} e event data posted to the worker\n */\nfunction fillBuffer (e) {\n  const counter = e.data.counter\n  const filteredSignal = e.data.filteredSignal\n  const blockCounter = (counter % analysisIntervalCounter) * FFT_SIZE\n\n  for (let sample = 0; sample < filteredSignal.length; sample++) {\n    // fill up block buffer for analysis window\n    realTimeBuffer[sample + blockCounter] = filteredSignal[sample]\n  }\n  if (counter % analysisIntervalCounter === 0) {\n    return realTimeBuffer\n  }\n}\n\n/**\n * Slice the ring (real time) buffer into 400 Ms blocks with 75% overlap -\n * collects all blocks for the current ring buffer.\n * @param {Array} filledrealTimeBufferClone\n * @param {Number} numberOfGatingBlocks\n * @param {Number} gatingBlockIntervalSamples\n * @returns {Array} allGatingBlocks\n */\nfunction sliceBuffer (filledrealTimeBufferClone, numberOfGatingBlocks, gatingBlockIntervalSamples) {\n  const allGatingBlocks = []\n  for (let block = 0; block < numberOfGatingBlocks; block++) {\n    const gatingBlockStepSize = block * (gatingBlockIntervalSamples * step)\n    const currentGatingBlock = new Array(\n      filledrealTimeBufferClone.slice(\n        gatingBlockStepSize,\n        gatingBlockIntervalSamples + gatingBlockStepSize\n      )\n    )\n    allGatingBlocks[block] = currentGatingBlock[0]\n  }\n  return allGatingBlocks\n}\n\n/**\n * Filters out the values below the threshold in the input array\n * @param {Array} blocksArray\n * @param {Number} threshold\n * @returns {Array} blocksArray\n */\nfunction filterOutBelowThreshold (blocksArray, threshold) {\n  blocksArray.filter(block => {\n    return meanSquareLoudness(block) > threshold\n  })\n  return blocksArray\n}\n\n/**\n * Finds the mean square loudness in LUFS according to ITU-R BS.1770-4\n *\n * The second input to this function accounts for averaging over\n * the 400 Ms analysis block defined in the norm.\n * @param {Array} signal\n * @param {Number} numberOfBlocks\n */\nfunction meanSquareLoudness (signal, averageOverBlocks = false) {\n  if (!averageOverBlocks) {\n    let sum = 0\n    for (let i = 0; i < signal.length; i++) {\n      sum += signal[i] ** 2\n    }\n    return -0.691 + 10 * Math.log10(sum / signal.length)\n  } else {\n    let blocksSum = 0\n    const numberOfBlocks = Object.keys(signal).length\n    for (let j = 0; j < numberOfBlocks; j++) {\n      let sum = 0\n      for (let i = 0; i < signal[0].length; i++) {\n        sum += signal[j][i] ** 2\n      }\n      blocksSum += sum / signal[j].length\n    }\n    return -0.691 + 10 * Math.log10(blocksSum / numberOfBlocks)\n  }\n}\n"],"sourceRoot":""}